# 1. 此 workflow 使用预编写指令为纯净 Ubuntu 开发环境安装最新版 Google Chrome 以及对应版本的 ChromeDriver
# 2. 此 workflow 使用 env 环境变量定位 build.py 安装脚本 以及 main.py 脚手架接口，若您的工程路径与默认配置不符请适当修改
# 3. 此 workflow 并未使用 Secret Key 传送敏感数据，你可能需要构建私有仓库或调整项目的配置逻辑
name: V2RSS Application

#   schedule 定时任务触发器 默认值 - cron: '25 * * * *' 表示为每 25 分钟执行一次
#   一般情况下不建议使用 GitHub Actions 部署 v2rss-server，仅在你缺少可用 VPS 时在此构建服务
on:
  push:
    branches: [ main ]
  # schedule:
  #   - cron: '25 * * * *'

jobs:
  build:
    # ============================================
    # TODO [√] 指定 Workflows 操作系统
    # ============================================
    # 务必选择 ubuntu-latest 以最高效率执行工作流，
    runs-on: ubuntu-latest

    # ============================================
    # TODO [√] 指定 Workflows 脚手架启动路径
    # ============================================
    env:
      # 环境初始化脚本的相对路径 such as V2RaycSpider1225/build.py
      BUILDER: V2RaycSpider1225/build.py
      # 脚手架接口文件的相对路径 such as V2RaycSpider1225/main.py
      SCAFFOLD: V2RaycSpider1225/main.py
    # ============================================
    # TODO [√] 检查工作分支及 Workflows 运行环境
    # ============================================
    steps:
    - uses: actions/checkout@v2

    # ============================================
    # TODO [√] 创建 Python3.6+ 编译环境
    # ============================================
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    # ============================================
    # TODO [√] 安装 Project 第三方依赖
    # ============================================
    # 拉取 requirement
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    # 1. 拉取最新版 Chrome 并适配对应版本的 ChromeDriver
    # 2. 初始化工作目录
    - name: Setup ChromeDriver
      run: |
        if [ -f ${{ env.BUILDER }} ]; then python build.py; fi
        if [ -f ${{ env.SCAFFOLD }} ]; then python main.py build; fi
    # ============================================
    # TODO [√] 测试 Scaffold 脚手架指令
    # ============================================
    # 执行一次数据库连接作业，检查相关配置信息是否填写正确
    - name: v2rss ping
      run: |
        if [ -f ${{ env.SCAFFOLD }} ]; then python main.py ping; fi
    # 执行一次清洗作业，检查订阅监听模块是否正常工作
    - name: v2rss overdue/decouple
      run: |
        if [ -f ${{ env.SCAFFOLD }} ]; then python main.py overdue; fi
        if [ -f ${{ env.SCAFFOLD }} ]; then python main.py decouple; fi
    # 执行一次采集作业，检查采集模块是否正常工作；使用 Spawn 指令可不受限制地采集订阅
    - name: v2rss spawn
      run: |
        if [ -f ${{ env.SCAFFOLD }} ]; then python main.py spawn; fi
