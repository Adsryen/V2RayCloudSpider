version: "3.7"
services:
  # https://docs.docker.com/engine/reference/commandline/service_create/#specify-service-constraints---constraint

  # =============================================
  # [√] SeleniumHQ-Docker
  # https://github.com/SeleniumHQ/docker-selenium
  # =============================================
  selenium-hub:
    image: selenium/hub:4.1.0-prerelease-20211105
    ports:
      - "4442:4442"
      - "4443:4443"
      - "4444:4444"
  chrome:
    image: selenium/node-chrome:4.1.0-prerelease-20211105
    shm_size: 2gb
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
    deploy:
      replicas: 1
    entrypoint: bash -c 'SE_OPTS="--host $$HOSTNAME" /opt/bin/entry_point.sh'
  # =============================================
  # [√] V2RSS-standalone
  # =============================================
  #  workers:
  #    depends_on:
  #      - selenium-hub
  #    image: ech0sec/v2rss:daddy
  #    build:
  #      context: .
  #      dockerfile: Dockerfile
  #    command:
  #      - spawn
  #    environment:
  #      UAtheK1nG: ""
  #      COMMAND_EXECUTOR: "http://selenium-hub:4444"
  # =============================================
  # [√] V2RSS
  # =============================================
  #   Swarm-Manager Collector
  v2rss:
    depends_on:
      - selenium-hub
    image: ech0sec/v2rss:daddy
    command: ["deploy","--synergy=False"]
    environment:
      UAtheK1nG: ""
      COMMAND_EXECUTOR: "http://selenium-hub:4444"
      INTERVAL_COLLECTOR: 500
      INTERVAL_OVERDUE: 60
      INTERVAL_DECOUPLE: 0
    # restart 指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，
    # 在生产环境中推荐配置为 always 或者 unless-stopped。
    # 在 swarm 中不起作用
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [ node.role == manager ]

  # Swarm-Worker Collector
  v2rss-node:
    depends_on:
      - selenium-hub
    image: ech0sec/v2rss:daddy
    command: [ "synergy" ]
    environment:
      UAtheK1nG: ""
      COMMAND_EXECUTOR: "http://selenium-hub:4444"
      INTERVAL_COLLECTOR: 0
      INTERVAL_OVERDUE: 0
      INTERVAL_DECOUPLE: 0
    deploy:
      placement:
        constraints: [ node.role == worker ]
      mode: replicated
      replicas: 2

  # APIs-Router
  #  router:
  #    image: ech0sec/v2rss:daddy
  #    command: [ "router" ,"--host=0.0.0.0" ]
  #    environment:
  #      COMMAND_EXECUTOR: "http://127.0.0.1:4444/wd/hub"
  #      UAtheK1nG: ""
  #    ports:
  #      - "6501:6500"
  #    deploy:
  #      placement:
  #        constraints: [ node.role == manager ]

  # =============================================
  # [√] HeartBeat
  # =============================================
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "7777:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [ node.role == manager ]

  # =============================================
  # [×] Redis-Cluster
  # =============================================
  #  redis:
  #    image: redis
  #    volumes:
  #      - "./redis:/usr/local/etc/redis/redis.conf"
  #      - "./data:/data"
  #    command:
  #      - redis-server
  #    restart: always
  #    ports:
  #      - "6379:6379"
  #    deploy:
  #      placement:
  #        constraints: [ node.role == manager ]
# -------------------------------------------------------------
# [√] Docker Swarm 集群常用控制指令
# -------------------------------------------------------------
# 1.Create
#   --> create 之前确保 compose 中涉及到的 Image 已经拉取到本地
#   --> docker stack deploy -c [.yaml fileName] [serviceName]
#   docker stack deploy -c docker-compose.yaml v2rss
# 2.Logs
#   查看某个 service 的日志
#   --> docker service logs [serviceName/serviceID]
#   docker service logs v2rss_v2rss
#   docker service logs v2rss_v2rss-node
#   docker service logs v2rss_router
#   docker service logs v2rss_chrome
#   docker service logs v2rss_selenium-hub
# 3.ls
#   查看活动的 service
#   docker service ls
# 4.Down
#   挂起 service
#   --> docker stack down [serviceName]
#    docker stack down  v2rss
# 5.ps
#   查看 service 运行状态
#   --> docker service ps [serviceName]
#   docker service ps v2rss_v2rss
#   docker service ps v2rss_redis
#   docker service ps v2rss_chrome
# 6.rm
#   --> docker service rm [serviceName]
#   docker service rm v2rss_v2rss
#   docker service rm v2rss_redis

# -------------------------------------------------------------
# [√] swarm join-token ：可以查看或更换join token。
# -------------------------------------------------------------
# docker swarm join-token worker                |查看加入woker的命令。
# docker swarm join-token manager               |查看加入manager的命令
# docker swarm join-token --rotate worker       |重置woker的Token。
# docker swarm join-token -q worker             |仅打印Token。